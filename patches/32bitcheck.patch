commit 44a326746d63b391cc88be6a88fce08fc27b3853
Author: Ryan Finnie <ryan@finnie.org>
Date:   Sun Dec 16 15:06:54 2018 -0800

    matches_number: Use long long int for 32bit + _FILE_OFFSET_BITS=64
    
    Closes rhinstaller/isomd5sum#20

diff --git a/libcheckisomd5.c b/libcheckisomd5.c
index 2d350bc..56552a2 100644
--- a/libcheckisomd5.c
+++ b/libcheckisomd5.c
@@ -149,7 +149,7 @@ int printMD5SUM(const char *file) {
     printf("%s:   %s\n", file, info->hashsum);
     if (strlen(info->fragmentsums) > 0 && info->fragmentcount > 0) {
         printf("Fragment sums: %s\n", info->fragmentsums);
-        printf("Fragment count: %zu\n", info->fragmentcount);
+        printf("Fragment count: %Lu\n", info->fragmentcount);
         printf("Supported ISO: %s\n", info->supported ? "yes" : "no");
     }
     free(info);
diff --git a/utilities.c b/utilities.c
index cfa84ed..ed90926 100644
--- a/utilities.c
+++ b/utilities.c
@@ -81,7 +81,7 @@ static size_t starts_with(const char *const buffer, const char *const string) {
  * Read and store number from buffer if the buffer starts with string.
  */
 static size_t matches_number(char *const buffer, size_t index,
-                             const char *const string, long int *const number) {
+                             const char *const string, long long int *const number) {
     size_t len = starts_with(buffer + index, string);
     index += len;
     if (len > 0UL && index < APPDATA_SIZE) {
@@ -93,7 +93,7 @@ static size_t matches_number(char *const buffer, size_t index,
             *ptr = buffer[index];
         *ptr = '\0';
         char *endptr;
-        *number = strtol(tmp, &endptr, 10);
+        *number = strtoll(tmp, &endptr, 10);
         return endptr != NULL && *endptr != '\0' ? 0UL : index;
     }
     return 0UL;
@@ -155,13 +155,13 @@ struct volume_info *const parsepvd(const int isofd) {
                  p++, index++) {
             }
         } else if ((len = matches_number(buffer, index,
-                                         "SKIPSECTORS = ", (long int *) &result->skipsectors))) {
+                                         "SKIPSECTORS = ", (long long int *) &result->skipsectors))) {
             index = len;
             if (index >= APPDATA_SIZE)
                 goto fail;
             task |= TASK_SKIP;
         } else if ((len = matches_number(buffer, index,
-                                         "RHLISOSTATUS=", (long int *) &result->supported))) {
+                                         "RHLISOSTATUS=", (long long int *) &result->supported))) {
             index = len;
             task |= TASK_SUPPORTED;
         } else if ((len = starts_with(buffer + index, "FRAGMENT SUMS = "))) {
@@ -175,7 +175,7 @@ struct volume_info *const parsepvd(const int isofd) {
             for (char *p = buffer + index; index < APPDATA_SIZE && *p != ';';
                  p++, index++) {
             }
-        } else if ((len = matches_number(buffer, index, "FRAGMENT COUNT = ", (long int *) &result->fragmentcount))) {
+        } else if ((len = matches_number(buffer, index, "FRAGMENT COUNT = ", (long long int *) &result->fragmentcount))) {
             index = len;
             task |= TASK_FRAGCOUNT;
         }
diff --git a/utilities.h b/utilities.h
index 909696a..4a1507b 100644
--- a/utilities.h
+++ b/utilities.h
@@ -61,8 +61,8 @@ int getpagesize() { return 2048; }
 struct volume_info {
     char hashsum[HASH_SIZE + 1];
     char fragmentsums[FRAGMENT_SUM_SIZE + 1];
-    size_t supported;
-    size_t fragmentcount;
+    off_t supported;
+    off_t fragmentcount;
     off_t offset;
     off_t isosize;
     off_t skipsectors;
